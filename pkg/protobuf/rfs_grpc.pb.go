// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __rfspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FTransferClient is the client API for FTransfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FTransferClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (FTransfer_UploadClient, error)
}

type fTransferClient struct {
	cc grpc.ClientConnInterface
}

func NewFTransferClient(cc grpc.ClientConnInterface) FTransferClient {
	return &fTransferClient{cc}
}

func (c *fTransferClient) Upload(ctx context.Context, opts ...grpc.CallOption) (FTransfer_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FTransfer_serviceDesc.Streams[0], "/rfspb.FTransfer/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &fTransferUploadClient{stream}
	return x, nil
}

type FTransfer_UploadClient interface {
	Send(*File) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type fTransferUploadClient struct {
	grpc.ClientStream
}

func (x *fTransferUploadClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fTransferUploadClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FTransferServer is the server API for FTransfer service.
// All implementations should embed UnimplementedFTransferServer
// for forward compatibility
type FTransferServer interface {
	Upload(FTransfer_UploadServer) error
}

// UnimplementedFTransferServer should be embedded to have forward compatible implementations.
type UnimplementedFTransferServer struct {
}

func (UnimplementedFTransferServer) Upload(FTransfer_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}

// UnsafeFTransferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FTransferServer will
// result in compilation errors.
type UnsafeFTransferServer interface {
	mustEmbedUnimplementedFTransferServer()
}

func RegisterFTransferServer(s grpc.ServiceRegistrar, srv FTransferServer) {
	s.RegisterService(&_FTransfer_serviceDesc, srv)
}

func _FTransfer_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FTransferServer).Upload(&fTransferUploadServer{stream})
}

type FTransfer_UploadServer interface {
	SendAndClose(*Empty) error
	Recv() (*File, error)
	grpc.ServerStream
}

type fTransferUploadServer struct {
	grpc.ServerStream
}

func (x *fTransferUploadServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fTransferUploadServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FTransfer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rfspb.FTransfer",
	HandlerType: (*FTransferServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _FTransfer_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "rfs.proto",
}
